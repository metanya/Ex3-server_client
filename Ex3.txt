שאלות:

1) המשאבים שבהם השתמשנו הם הפונקציות GET POST DELETE
הם נמצאים בקובץ routes.js
router.get('/albums', userRoutes.get_all_albums);
router.get('/albums/:id', userRoutes.get_albums);
router.post('/albums/:id', userRoutes.create_photo);
router.delete('/albums/:id', userRoutes.delete_album);
router.post('/albums', userRoutes.create_album);

2) השתמשנו כHTTP וAjax כmiddleware.
המטרה הייתה: טובת הקישור בין הלקוח לשרת, השרת במדבר בעזרת JSON והלקוח לא.
נועד לטובת ביצוע ההמרה וההתאמה הזו.

3) היתרונות הם:
- מערכת מבוזרת, תמיכה בקליינט-סרבר: בתור לקוח, אפשר לפנות לשירותים חיצוניים בקלות ולשלב אותם בתוך המערכת שלי.
- בתור שרת: אפשר לחשוף שירותים שונים החוצה באופן אחיד ופשוט, שיאפשר ללקוחות לפני אלי
- שימוש חוזר בקוד. צד שרת ימומש כשירות API, ומערכות שונות יפנו אליו וייצגו אותו בצורה המתאימה להם.
- זו ארכיטקטורה ולא פרוטוקול. מוגדרים כללים אחידים לתקשורת בהתבסס על פרוטוקול HTTP המוכר- פשוט להבנה, תפעול ושינוי.
- חלוקה בין צד סרבר לבין צד קליינט מאפשרת חלוקת תחזוקה, טיפול באופן שונה במאפיינים של כל צד
- רב-שכבתיות, הקשר בין הלקוח לשרת לא חייב להיות ישיר.
- שרת-לקוח, עובד רק בתפיסת שרת לקוח, כאשר האחד אינו מושפע ממה שמתרחש באחר, למעט המסרים העוברים ביניהם.
- Stateless, ההקשר  של הלקוח בפנייה לשרת, אינו נשמר בשרת. מגבלה זו נועדה לשפר את Scalability השרת.

4) אנחנו מתייחסים במימוש restful api למאפיניים הבאים: שקיפות, יכולת הרחבה, בו זמניות ושיתוף משאבים.